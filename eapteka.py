import time
import csv
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import undetected_chromedriver as uc

def fetch_page(driver, url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–∫–æ–¥"""
    print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
    driver.get(url)
    WebDriverWait(driver, 10).until(lambda d: d.execute_script("return document.readyState") == "complete")
    return driver.page_source

def parse_product(product):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
    try:
        title_element = product.select_one('.listing-card__title')
        title = title_element.text.strip() if title_element else "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"

        link_element = product.select_one('a[href]')
        link = 'https://www.eapteka.ru' + link_element['href'] if link_element else '–ù–µ—Ç —Å—Å—ã–ª–∫–∏'

        price_element = product.select_one('.listing-card__price-new')
        price = price_element.text.strip() if price_element else "–ù–µ—Ç —Ü–µ–Ω—ã"

        brand_element = product.select_one('.listing-card__brand + a')
        brand_name = brand_element.text.strip() if brand_element else '–ù–µ—Ç –±—Ä–µ–Ω–¥–∞'

        match = re.search(r'(\d+)\s*—à—Ç', title)
        package = f"{match.group(1)} —Ç–∞–±–ª." if match else ""

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {title} | –¶–µ–Ω–∞: {price} | –°—Å—ã–ª–∫–∞: {link}")

        return [title, price, 'Eapteka.ru', link, brand_name, package, '–ú–æ—Å–∫–≤–∞']
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}')
        return None

def parse_page(driver, url, first_page=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    html = driver.page_source
    soup = BeautifulSoup(html, 'html.parser')

    products = soup.select('section.listing-card.js-neon-item')
    print(f"üõç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} –Ω–∞ {url}")

    if first_page:
        try:
            close_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "–ó–∞–∫—Ä—ã—Ç—å")]'))
            )
            close_button.click()
            print("üóô –ó–∞–∫—Ä—ã–ª–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ")
        except:
            print('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å')

    return [parse_product(product) for product in products if product]

def scroll_to_bottom(driver):
    """–ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑"""
    last_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.execute_script("window.scrollBy(0, document.body.scrollHeight);")
        time.sleep(1.5)
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height

def parse_eapteka_bads(driver, base_url, num_pages):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    all_data = []
    start_time = time.time()  # –ù–∞—á–∞–ª–æ —Ç–∞–π–º–µ—Ä–∞

    for page in range(1, num_pages + 1):
        url = f"{base_url}?PAGEN_1={page}" if page > 1 else base_url
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}: {url}")

        driver.get(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        time.sleep(2)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á—É—Ç—å –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ —Å–∫—Ä–æ–ª–ª–æ–º

        scroll_to_bottom(driver)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏

        first_page = (page == 1)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pop-up —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_data = parse_page(driver, url, first_page)

        if page_data:
            all_data.extend(page_data)

    end_time = time.time()  # –ö–æ–Ω–µ—Ü —Ç–∞–π–º–µ—Ä–∞
    print(f"‚è≥ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {round(end_time - start_time, 2)} —Å–µ–∫—É–Ω–¥")
    return all_data


def write_to_csv(data, filename='eapteka_bads.csv'):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV-—Ñ–∞–π–ª."""
    if data:
        with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
            writer = csv.writer(csvfile, delimiter=';')
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ê–ø—Ç–µ–∫–∞", "–°—Å—ã–ª–∫–∞", "–ë—Ä–µ–Ω–¥", "–£–ø–∞–∫–æ–≤–∫–∞", "–ì–æ—Ä–æ–¥"])
            writer.writerows(data)
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {filename}")
    else:
        print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ CSV.')

if __name__ == '__main__':

    options = uc.ChromeOptions()
    options.add_argument('start-maximized')

    driver = uc.Chrome(options=options)

    base_url = 'https://www.eapteka.ru/goods/vitaminy_i_bad/'
    num_pages = 2

    data = parse_eapteka_bads(driver, base_url, num_pages)
    driver.close()
    time.sleep(2)
    driver.quit()
    write_to_csv(data)


